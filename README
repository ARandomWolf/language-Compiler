** Storage = Local **

Author: Wyatt Wolf
Github: https://github.com/ARandomWolf/language-Compiler.git
Project written in python version 2.7.5

Project Stages:
1) scanner (FSA table) <complete>
    The scanner portion of this project takes in file or console input,
    then outputs a list of tokens one at a time, giving details on each one.

2) parser <complete>
    The parser takes in tokens one at a time and insures they match the language grammar.
    If the token is a subset of the grammar it is added to the parse tree.
    All errors should stop the parsing process and report an error.

3) Variable scope validation <complete>
    This stage insures all variables have been properly declared and
    are in the scope of the program when used.

4) Code Generation <complete>
    Variables declared in the source language are stored on the stack in target language (.asm assembly).
    All global variables in target language are for temporary variables/labels or
    user declared variables that are used as a label. The value of the last type respectively is tracked on the stack,
    but initialized globally to zero for uses as a Label.

----------------------------------------------------------------------------------------
How to run program

option 1 (input entered by user):
        python compfs.py

        Note: CTRL-D or CTRL-Z (EOF) must be entered on new line.
        All text present on the same line as the EOF token will be lost and cause errors.

option 2 (using file input): python compfs.py filename

option 3 (redirect): python compfs.py < filename

errors: insure python 2.7.5 or compatible version is installed.
        Insure Environment variables or python path is set correctly.

----------------------------------------------------------------------------------------
Lexical definitions for making tokens
Alphabet:
    - All English letters (upper and lower), digits, plus the extra characters as seen below, plus WS.

Identifiers:
    - Begin with an upper or lower case letter or underscore.
    - Continue with any number of letters (uppercase or lowercase) or digits.

Keywords:
    begin end do while whole label return input output
    program warp if then pick declare assign func

Operators and delimiters (all single character except ==  := != || && ):
    =  <  > == != : :=  +  -  *  /   ^  . (  ) , { } ; [ ] || &&

Integers:
    - Any sequence of decimal digits, no sign, no decimal point.

Comments:
    - Start with # and end with #.  ex:  # this is a comment #
    - Can cross multiple lines.

---------------------------------------------------------------------------------------------
Runtime Semantics


    Relational operators '>' '<' '==' '!='  all mean the same as C.
    Relational operator '[=]' returns true if the signs of the arguments are the same (with a 0 counting as positive).
    '+' '-' '*' are standard arithmetical, '/' is integer division, unary ':' is negation.
    Assignment evaluates the expression on the right and assigns to the ID on the left.
    while is like the while loop in C.
    If statement is like in C.
    IO reads/prints a 2-byte signed integer.
    All data is 2-byte signed integer.
    Input reads in an integer from input and stores it in the identifier.
    Output outputs the given calculated expression.
    Label statement places a label that can be jumped to directly using "warp".
    Labels must be unique.

---------------------------------------------------------------------------------------------
Language Grammar

<program> -> <vars> program <block>
<block> -> begin <vars> <stats> end
<vars> -> empty | whole Identifier := NUM_tk ; <vars>
<expr> -> <N> <expr_prime>
<expr_prime>-> -<expr> | EMPTY
<N>-> <A><N’>
<N’>-> +<N> | *<N> | EMPTY
<A>-> <M><A’>
<A’>-> /<A> | EMPTY
<M> -> : <M> | <R>
<R> -> ( <expr> ) | IDENT_tk | NUM_tk
<stats> -> <stat> <mStat>
<mStat> -> empty | <stat> <mStat>
<stat> -> <in_nt>; | <out_nt>; | <block> | <if_nt>; | <warp_nt>; | <assign_nt>; | <loop_nt>; | <label_nt>;
<in_nt> -> input IDENT_tk
<out_nt> -> output <expr>
<if_nt> -> if [ <expr> <RO> <expr> ] then <stat><if_nt_prime>
<if_nt_prime>-> pick <stat> | EMPTY
<loop_nt> -> while [ <expr> <RO> <expr> ] <stat>
<assign_nt> -> assign IDENT_tk = <expr>
<RO> -> > | < | == | [ = ] (three tokens) | !=
<label_nt> -> label IDENT_tk
<warp_nt> -> warp IDENT_tk
